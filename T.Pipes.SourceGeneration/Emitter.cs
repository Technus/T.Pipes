using System.Collections.Generic;
using System.Linq;
using System.Threading;
using CodegenCS;
using Microsoft.CodeAnalysis;

namespace T.Pipes.SourceGeneration
{
  internal class Emitter
  {
    private CancellationToken cancellationToken;
    private readonly ICodegenTextWriter writer;

    public Emitter(CancellationToken cancellationToken)
    {
      this.cancellationToken = cancellationToken;
      writer = new CodegenTextWriter();
      writer.IndentString = "  ";
    }

    internal (string hintName, string source) EmitType(TypeDefinition typeDefinition)
    {
      writer.WriteLine($$"""
      //Generated by T.Pipes.SourceGeneration

      {{() => typeDefinition.UsingList.ForEach(x => RenderUsing(x))}}
      namespace {{typeDefinition.Namespace}}
      {
      #nullable enable
      {{() => RenderContent(typeDefinition)}}
      #nullable restore
      }
      """);
      return (typeDefinition.Name + ".g.cs", writer.ToString());
    }

    private void RenderUsing(string usingName) => writer.WriteLine($$"""
      using {{usingName}};
      """);

    private void RenderContent(TypeDefinition typeDefinition) => writer.Write($$"""
      {{() => typeDefinition.TypeList.ForEach(x => RenderTypeStart(x))}}
      {{() => RenderInnerContent(typeDefinition)}}
      {{() => typeDefinition.TypeList.ForEach(x => RenderTypeEnd())}}
      """);

    private void RenderTypeStart(string typeDefinition) => writer
      .IncreaseIndent()
      .WriteLine($$"""
      {{typeDefinition}}
      {
      """);

    private void RenderTypeEnd() => writer
      .WriteLine($$"""
      }
      """)
      .DecreaseIndent();

    private void RenderInnerContent(TypeDefinition typeDefinition)
    {
      writer.IncreaseIndent();
      typeDefinition.ServeMemberDeclarations.ForEach(symbol => RenderSymbol(typeDefinition, symbol, true));
      typeDefinition.UsedMemberDeclarations.ForEach(symbol => RenderSymbol(typeDefinition, symbol, false));
      writer.DecreaseIndent();
    }

    private void RenderSymbol(TypeDefinition typeDefinition, ISymbol symbol, bool served)
    {
      switch (symbol)
      {
        case IMethodSymbol methodSymbol: RenderMethod(typeDefinition, methodSymbol, served); break;
      }
    }

    private void RenderMethod(TypeDefinition typeDefinition, IMethodSymbol x, bool served) => writer
      .WriteLine($$"""
      {{() => RenderAttributes(x)}}
      {{() => RenderSignature(x, served)}}
      {
      {{() => RenderBody(typeDefinition, x, served)}}
      }
      """);

    private void RenderAttributes(IMethodSymbol x)
    {
      writer.Write("[System.ComponentModel.Description(\"").Write(x.MethodKind).Write("\")]");
      switch (x.MethodKind)
      {
        case MethodKind.PropertyGet:
        case MethodKind.PropertySet:
        case MethodKind.Ordinary:
          {
            break;
          }
        default:
          {
            writer.Write("""[System.Obsolete("Not Generated")]""");
            break;
          }
      }
    }

    private void RenderBody(TypeDefinition typeDefinition, IMethodSymbol x, bool served)
    {
      writer.IncreaseIndent();
      switch (x.MethodKind)
      {
        case MethodKind.PropertyGet:
          {
            if (served)
            {
              writer.Write($$"""return Remote<{{x.ReturnType.ToDisplayString()}}>("{{()=> RenderName(x,served)}}");""");
            }
            else
            {
              writer.Write($$"""return (({{x.ContainingType.ToDisplayString()}}?) Target)!.{{x.Name.Substring(4)}};""");
            }
            break;
          }
        case MethodKind.PropertySet:
          {
            if (served)
            {
              writer.Write($$"""Remote<{{x.Parameters[0].Type.ToDisplayString()}}>("{{() => RenderName(x, served)}}", value);""");
            }
            else
            {
              writer.Write($$"""(({{x.ContainingType.ToDisplayString()}}?) Target)!.{{x.Name.Substring(4)}} = value;""");
            }
            break;
          }
        case MethodKind.Ordinary:
          {
            var (input, output) = GetIO(x);
            if (served)
            {
              if (!x.ReturnsVoid || output.Count > 0)
                writer.Write("var result = ");

              writer.Write("Remote");

              if (!x.ReturnsVoid || output.Count > 0 || input.Count > 0)
              {
                writer.Write('<');

                if (input.Count > 1)
                  writer.Write("(");
                RenderTypeParameters(input.Select(x => x.Type).ToArray());
                if (input.Count > 1)
                  writer.Write(")");

                if ((!x.ReturnsVoid || output.Count > 0) && input.Count > 0)
                  writer.Write(", ");

                if ((!x.ReturnsVoid && output.Count > 0) || output.Count > 1)
                  writer.Write('(');
                if (!x.ReturnsVoid)
                  writer.Write(x.ReturnType.ToDisplayString());
                RenderTypeParameters(output.Select(x => x.Type).ToArray(), !x.ReturnsVoid);
                if ((!x.ReturnsVoid && output.Count > 0) || output.Count > 1)
                  writer.Write(')');

                writer.Write('>');
              }

              writer.Write("(\"");
              RenderName(x, served);
              writer.Write('"');
              if(input.Count > 0)
                writer.Write(", ");
              if(input.Count > 1)
                writer.Write('(');
              RenderStrings(input.Select(x => x.Name).ToArray());
              if (input.Count > 1)
                writer.Write(')');
              writer.Write(");");

              if (!x.ReturnsVoid || output.Count > 0)
                writer.WriteLine();

              if ((!x.ReturnsVoid && output.Count > 0) || output.Count > 1)
              {
                for (int i = output.Count - 1; i >= 0; i--)
                {
                  writer.Write($$"""{{output[i].Name}} = result.Item{{i + (x.ReturnsVoid ? 1 : 2)}};""");
                }
              }

              if (x.ReturnsVoid && output.Count == 1)
              {
                writer.Write($$"""{{output[0].Name}} = result;""");
              }

              if (!x.ReturnsVoid)
              {
                if (output.Count > 0)
                  writer.Write("return result.Item1;");
                else
                  writer.Write("return result;");
              }
            }
            else
            {
              if (!x.ReturnsVoid)
                writer.Write("var result = ");

              writer.Write($$"""(({{x.ContainingType.ToDisplayString()}}?) Target)!.{{x.Name}}""");

              if(x.TypeParameters.Length > 0)
              {
                writer.Write('<');
                RenderTypeParameters(x.TypeParameters);
                writer.Write('>');
              }

              writer.Write('(');
              for (int i = 0; i < x.Parameters.Length; i++)
              {
                var parameter = x.Parameters[i];
                switch (parameter.RefKind)
                {
                  case RefKind.None when input.Count > 1: writer.Write("parameter."); break;
                  case RefKind.Ref  when input.Count > 1: writer.Write("ref parameter."); break;
                  case RefKind.Ref: writer.Write("ref "); break;
                  case RefKind.Out: writer.Write("out var "); break;
                  case RefKind.In when input.Count > 1:
                  case RefKind.In + 1 when input.Count > 1: writer.Write("ref parameter."); break;
                  case RefKind.In:
                  case RefKind.In + 1: writer.Write("in "); break;
                }
                writer.Write(parameter.Name);
                if (i != x.Parameters.Length - 1)
                {
                  writer.Write(", ");
                }
              }
              writer.Write(");");

              if (!x.ReturnsVoid || output.Count > 0)
              {
                writer.WriteLine();

                if (!x.ReturnsVoid)
                {
                  if (output.Count == 0)
                    writer.Write("return result;");
                  else
                  {
                    writer.Write("return (result, ");
                    for (int i = 0; i < output.Count; i++)
                    {
                      var parameter = output[i];
                      switch (parameter.RefKind)
                      {
                        case RefKind.None when input.Count > 1:
                        case RefKind.Ref when input.Count > 1: writer.Write("parameter."); break;
                        case RefKind.Ref: break;
                        case RefKind.Out: break;
                        case RefKind.In when input.Count > 1:
                        case RefKind.In + 1 when input.Count > 1: writer.Write("parameter."); break;
                        case RefKind.In:
                        case RefKind.In + 1: break;
                      }
                      writer.Write(parameter.Name);
                      if (i != output.Count - 1)
                      {
                        writer.Write(", ");
                      }
                    }
                    writer.Write(");");
                  }
                }
                else
                {
                  if (output.Count == 1)
                  {
                    writer.Write("return ");
                    writer.Write(output[0].Name);
                    writer.Write(';');
                  }
                  else
                  {
                    writer.Write("return (");
                    for (int i = 0; i < output.Count; i++)
                    {
                      var parameter = output[i];
                      switch (parameter.RefKind)
                      {
                        case RefKind.None when input.Count > 1:
                        case RefKind.Ref when input.Count > 1: writer.Write("parameter."); break;
                        case RefKind.Ref: break;
                        case RefKind.Out: break;
                        case RefKind.In when input.Count > 1:
                        case RefKind.In + 1 when input.Count > 1: writer.Write("parameter."); break;
                        case RefKind.In:
                        case RefKind.In + 1: break;
                      }
                      writer.Write(parameter.Name);
                      if (i != output.Count - 1)
                      {
                        writer.Write(", ");
                      }
                    }
                    writer.Write(");");
                  }
                }
              }
            }
            break;
          }
        default:
          {
            writer.Write("throw new NotImplementedException();");
            break;
          }
      }
      writer.DecreaseIndent();
    }

    private void RenderName(IMethodSymbol x, bool served)
    {
      writer
        //.Write(served?"Serve_":"Using_")
        .Write(x.ContainingType.Name);
      if (x.ContainingType.Arity > 0)
        writer.Write(x.ContainingType.Arity);
      writer
        .Write('_')
        .Write(x.Name);
    }

    private void RenderSignature(IMethodSymbol x, bool served)
    {
      writer.Write("internal ");
      if (x.IsStatic)
        writer.Write("static ");
      if (x.IsAsync)
        writer.Write("async ");
      if (served)
      {
        writer
          .Write(x.ReturnType.ToDisplayString())
          .Write(' ');
        RenderName(x, served);
        if (x.TypeParameters.Length > 0)
        {
          writer.Write('<');
          RenderTypeParameters(x.TypeParameters);
          writer.Write('>');
        }
        writer.Write('(');
        RenderParameters(x.Parameters);
        writer.Write(')');
      }
      else
      {
        var (input, output) = GetIO(x);
        if(x.ReturnsVoid && output.Count == 0)
        {
          writer.Write("void");
        }
        else if(x.ReturnsVoid && output.Count == 1)
        {
          writer.Write(output[0].Type.ToDisplayString());
        }
        else if (!x.ReturnsVoid && output.Count == 0)
        {
          writer.Write(x.ReturnType.ToDisplayString());
        }
        else
        {
          writer.Write('(');
          if(!x.ReturnsVoid)
            writer.Write(x.ReturnType.ToDisplayString());
          if(!x.ReturnsVoid && output.Count > 0)
            writer.Write(", ");
          RenderStrings(output.Select(x=>x.Type.ToDisplayString()).ToArray());
          writer.Write(')');
        }
        writer.Write(' ');
        RenderName(x, served);
        if (x.TypeParameters.Length > 0)
        {
          writer.Write('<');
          RenderTypeParameters(x.TypeParameters);
          writer.Write('>');
        }
        writer.Write('(');
        if(input.Count>1)
          writer.Write('(');
        for (int i = 0; i < input.Count; i++)
        {
          var parameter = input[i];
          writer.Write(parameter.Type.ToDisplayString());
          writer.Write(' ');
          writer.Write(parameter.Name);
          if (i != input.Count - 1)
          {
            writer.Write(", ");
          }
        }
        if (input.Count > 1)
          writer.Write(") parameter");
        writer.Write(')');
      }
    }

    private (List<IParameterSymbol> input, List<IParameterSymbol> output) GetIO(IMethodSymbol x)
    {
      var input = new List<IParameterSymbol>();
      var output = new List<IParameterSymbol>();

      foreach (var parameter in x.Parameters)
      {
        switch (parameter.RefKind)
        {
          case RefKind.None: input.Add(parameter); break;
          case RefKind.Ref: input.Add(parameter); output.Add(parameter); break;
          case RefKind.Out: output.Add(parameter); break;
          case RefKind.In:
          case RefKind.In + 1: input.Add(parameter); break;
        }
      }
      return (input, output);
    }

    private void RenderTypeParameters(IReadOnlyList<ISymbol> symbols, bool leadingComma = false)
    {
      if (symbols.Count > 0 && leadingComma)
        writer.Write(", ");

      for (int i = 0; i < symbols.Count; i++)
      {
        var symbol = symbols[i];
        writer.Write(symbol.ToDisplayString());
        if (i != symbols.Count - 1)
        {
          writer.Write(", ");
        }
      }
    }

    private void RenderStrings(IReadOnlyList<string> parameters, bool leadingComma = false)
    {
      if (parameters.Count > 0 && leadingComma)
        writer.Write(", ");

      for (int i = 0; i < parameters.Count; i++)
      {
        var parameter = parameters[i];
        writer.Write(parameter);
        if (i != parameters.Count - 1)
        {
          writer.Write(", ");
        }
      }
    }

    private void RenderParameters(IReadOnlyList<ISymbol> parameters, bool leadingComma = false)
    {
      if(parameters.Count > 0 && leadingComma)
        writer.Write(", ");

      for (int i = 0; i < parameters.Count; i++)
      {
        var parameter = parameters[i];
        writer.Write(parameter.ToDisplayString());
        if(i != parameters.Count - 1)
        {
          writer.Write(", ");
        }
      }
    }
  }
}
