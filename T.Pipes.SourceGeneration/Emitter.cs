using System.Threading;
using CodegenCS;

namespace T.Pipes.SourceGeneration
{
  internal class Emitter
  {
    private CancellationToken cancellationToken;
    private readonly ICodegenTextWriter writer;

    public Emitter(CancellationToken cancellationToken)
    {
      this.cancellationToken = cancellationToken;
      writer = new CodegenTextWriter();
      writer.IndentString = "  ";
    }

    internal (string hintName, string source) EmitType(TypeDefinition typeDefinition)
    {
      writer.WriteLine($$"""
      //Generated by T.Pipes.SourceGeneration

      {{() => typeDefinition.UsingList.ForEach(x => RenderUsing(x))}}
      namespace {{typeDefinition.Namespace}}
      {
      {{() => RenderContent(typeDefinition)}}}
      """);
      return (typeDefinition.Name + ".g.cs", writer.ToString());
    }

    private void RenderUsing(string usingName) => writer.WriteLine($$"""
      using {{usingName}};
      """);

    private void RenderContent(TypeDefinition typeDefinition) => writer.Write($$"""
      {{() => typeDefinition.TypeList.ForEach(x => RenderTypeStart(x))}}
      {{() => RenderInnerContent(typeDefinition)}}
      {{() => typeDefinition.TypeList.ForEach(x => RenderTypeEnd())}}
      """);

    private void RenderTypeStart(string typeDefinition) => writer
      .IncreaseIndent()
      .WriteLine($$"""
      {{typeDefinition}}
      {
      """);

    private void RenderTypeEnd() => writer
      .WriteLine($$"""
      }
      """)
      .DecreaseIndent();

    private void RenderInnerContent(TypeDefinition typeDefinition) => writer.WriteLine("//Nog");
  }
}
