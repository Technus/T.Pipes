using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using CodegenCS;
using Microsoft.CodeAnalysis;

namespace T.Pipes.SourceGeneration
{
  internal class Emitter
  {
    private static RenderEnumerableOptions NewLines { get; } = RenderEnumerableOptions.CreateWithCustomSeparator("\n");
    private static RenderEnumerableOptions CSV { get; } = RenderEnumerableOptions.SingleLineCSV;
    private static string GeneratorAssemblyName { get; } = typeof(Emitter).Assembly.FullName;

    private CancellationToken CancellationToken { get; }
    private TypeDefinition TypeDefinition { get; }
    private ICodegenTextWriter Writer { get; }

    public Emitter(CancellationToken cancellationToken, TypeDefinition typeDefinition)
    {
      CancellationToken = cancellationToken;
      TypeDefinition = typeDefinition;
      Writer = new CodegenTextWriter();
      Writer.IndentString = "  ";
    }

    internal (string hintName, string source) EmitType()
    {
      Writer.WriteLine($$"""
      //Generated by {{GeneratorAssemblyName}}

      namespace {{TypeDefinition.Namespace}}
      {
      #nullable enable
      {{() => RenderContent()}}
      #nullable restore
      }
      """);
      return (TypeDefinition.Name + ".g.cs", Writer.ToString());
    }

    private void RenderContent()
    {
      for (int i = 0; i < TypeDefinition.TypeList.Count; i++)
      {
        Writer
          .IncreaseIndent()
          .Write(TypeDefinition.TypeList[i]);
        if(TypeDefinition.ImplementingTypes.Count > 0 && i == TypeDefinition.TypeList.Count - 1) //Write Interfaces to decorated class
        {
          Writer.Write(" : ");
          RenderStrings(TypeDefinition.ImplementingTypes.Select(x => x.TypeUse()).ToArray());
        }
        Writer
          .WriteLine()
          .WriteLine('{');
      }

      Writer.IncreaseIndent();
      RenderInnerContent();
      Writer.DecreaseIndent();

      for (int i = 0; i < TypeDefinition.TypeList.Count; i++)
      {
        Writer
          .WriteLine('}')
          .DecreaseIndent();
      }
    }

    private void RenderInnerContent()
    {
      TypeDefinition.ServeMemberDeclarations.ForEach(symbol => RenderHelper(symbol, true));
      TypeDefinition.UsedMemberDeclarations.ForEach(symbol => RenderHelper(symbol, false));
      RenderStaticSelector();
      RenderTargetHandling(); 
      TypeDefinition.ServeMemberDeclarations.ForEach(RenderImplementation);
      TypeDefinition.ImplementingTypes.ForEach(RenderCast);
    }

    private void RenderCast(ITypeSymbol typeSymbol) => Writer
      .WriteLine($$"""
        public {{typeSymbol.TypeUse()}} As{{() => RenderTypeName((INamedTypeSymbol)typeSymbol!,true)}} 
          => ({{typeSymbol.TypeUse()}})this;
        """);

    private void RenderImplementation(ISymbol symbol)
    {
      switch (symbol)
      {
        case IPropertySymbol propertySymbol: RenderNewProperty(propertySymbol); break;
        case IEventSymbol eventSymbol: RenderNewEvent(eventSymbol); break;
        case IMethodSymbol methodSymbol when methodSymbol.MethodKind == MethodKind.Ordinary: RenderNewMethod(methodSymbol); break;
        case IMethodSymbol: return;
        default: Writer.Write("//").Write(symbol.Kind).Write(' ').WriteLine(symbol.Name); break;
      }
      Writer.WriteLine();
    }

    private void RenderNewMethod(IMethodSymbol methodSymbol) => Writer
      .WriteLine($$"""
        {{methodSymbol.ReturnType.TypeUse()}} {{methodSymbol.ContainingType.TypeUse()}}.{{methodSymbol.Name}}({{()=>RenderParameters(methodSymbol.Parameters)}})
          => {{()=>RenderName(methodSymbol, true)}}({{()=>RenderStrings(methodSymbol.Parameters.Select(p=> p.Prefix() + p.Name).ToArray())}});
        """);

    private void RenderNewEvent(IEventSymbol eventSymbol) => Writer
      .WriteLine($$"""
        internal {{eventSymbol.Type.TypeUse()}} {{() => RenderName(eventSymbol, true,"event_")}};
        event {{eventSymbol.Type.TypeUse()}} {{eventSymbol.ContainingType.TypeUse()}}.{{eventSymbol.Name}}
        { 
          add => {{() => RenderName(eventSymbol, true, "event_")}} += value;
          remove => {{() => RenderName(eventSymbol, true, "event_")}} -= value;
        }
        """);

    private void RenderNewProperty(IPropertySymbol propertySymbol) => Writer
      .WriteLine($$"""
        {{propertySymbol.Type.TypeUse()}} {{propertySymbol.ContainingType.TypeUse()}}.{{propertySymbol.Name}}
        { 
          get => {{()=>RenderName(propertySymbol,true,"get_")}}(); 
          set => {{() => RenderName(propertySymbol, true, "set_")}}(value); 
        }
        """);

    private void RenderTargetHandling() => Writer
      .WriteLine($$"""

        [System.ComponentModel.Description("TargetInit")]
        protected override void TargetInitAuto()
        {
          base.TargetInitAuto();
        {{() => RenderEventHandling(TypeDefinition.UsedMemberDeclarations.Where(x => x is IEventSymbol).Cast<IEventSymbol>().ToArray(), true)}}
        }
      
        [System.ComponentModel.Description("TargetDeInit")]
        protected override void TargetDeInitAuto()
        {
          base.TargetDeInitAuto();
        {{() => RenderEventHandling(TypeDefinition.UsedMemberDeclarations.Where(x => x is IEventSymbol).Cast<IEventSymbol>().ToArray(), false)}}
        }

        """);

    private void RenderEventHandling(IReadOnlyList<IEventSymbol> symbols, bool v)
    {
      Writer.IncreaseIndent();

      foreach (var e in symbols)
      {
        Writer.Write($$"""(({{e.ContainingType.TypeUse()}}?) Target)!.{{e.Name}}""");
        Writer.Write(v ? " += " : " -= ");
        RenderName(e, false, "invoke_");
        Writer.WriteLine(';');
      }

      Writer.DecreaseIndent();
    }

    private void RenderStaticSelector() => Writer
      .Write($$"""
      static {{TypeDefinition.TypeDeclarationSyntax.Identifier}}()
      {
        RegisterCommandSelectorFunctionsFor{{()=>RenderTypeSyntaxName()}}();
      }

      [System.ComponentModel.Description("CommandSelector")]
      static internal void RegisterCommandSelectorFunctionsFor{{() => RenderTypeSyntaxName()}}()
      {{() => RenderStaticSelectorBody()}}
      """);

    private void RenderStaticSelectorBody()
    {
      Writer.WriteLine('{');
      Writer.IncreaseIndent();
      Writer.WriteLine("#pragma warning disable CS8600, CS8604, CS8605");
      foreach(var item in TypeDefinition.Commands)
      {
        if(item.Value.method is IMethodSymbol methodSymbol)
        {
          var (input, output) = GetIO(methodSymbol);

          Writer.Write($$"""Functions["{{item.Key}}"] = static (callback, message) => { """);

          if (!item.Value.invoke.ReturnsVoid || output.Count > 0)
          {
            Writer.Write("return callback.SendResponseAsync(message, ");
          }

          Writer.Write($"callback.{item.Key}(");
          if (input.Count > 0)
          {
            Writer.Write('(');
            if (input.Count > 1)
              Writer.Write('(');
            RenderStrings(input.Select(x => x.Type.TypeUse()).ToArray());
            if (input.Count > 1)
              Writer.Write(')');
            Writer.Write(")message.Parameter");
          }

          if (!item.Value.invoke.ReturnsVoid || output.Count > 0)
          {
            Writer.Write(")");
          }

          Writer.Write(");");

          if (item.Value.invoke.ReturnsVoid && output.Count == 0)
          {
            Writer.Write(" return callback.SendResponseAsync(message);");
          }

          Writer.WriteLine(" };");
        }
        else if(item.Value.method is IEventSymbol eventSymbol)
        {
          Writer.Write($$"""Functions["{{item.Key}}"] = static (callback, message) => { """);

          if (!item.Value.invoke.ReturnsVoid)
          {
            Writer.Write("return callback.SendResponseAsync(message, ");
          }

          Writer.Write("callback.").Write(item.Key).Write('(');
          if (item.Value.invoke.Parameters.Length > 0)
          {
            Writer.Write('(');
            RenderStrings(item.Value.invoke.Parameters.Select(x => x.Type.TypeUse()).ToArray());
            Writer.Write(")message.Parameter");
          }

          if (!item.Value.invoke.ReturnsVoid)
          {
            Writer.Write(")");
          }

          Writer.Write(");");

          if (item.Value.invoke.ReturnsVoid)
          {
            Writer.Write(" return callback.SendResponseAsync(message);");
          }

          Writer.WriteLine(" };");
        }
      }
      Writer.WriteLine("#pragma warning restore CS8600, CS8604, CS8605");
      Writer.DecreaseIndent();
      Writer.WriteLine();
      Writer.WriteLine('}');
    }

    private void RenderHelper(ISymbol symbol, bool served)
    {
      switch (symbol)
      {
        case IMethodSymbol methodSymbol: RenderMethod(methodSymbol, served); break;
        case IEventSymbol eventSymbol: RenderEvent(eventSymbol, served); break;
        case IPropertySymbol: return;
        default: Writer.Write("//").Write(symbol.Kind).Write(' ').WriteLine(symbol.Name); break;
      }
      Writer.WriteLine();
    }

    private void RenderEvent(IEventSymbol eventSymbol, bool served)
    {
      RenderAttributes(eventSymbol, served);
      RenderSignature(eventSymbol, served);
      RenderBody(eventSymbol, served);
    }

    private void RenderMethod(IMethodSymbol methodSymbol, bool served)
    {
      RenderAttributes(methodSymbol, served);
      RenderSignature(methodSymbol, served);
      RenderBody(methodSymbol, served);
    }

    private void RenderAttributes(IEventSymbol eventSymbol, bool served = false) => Writer
      .Write("[System.ComponentModel.Description(\"")
      .Write(MethodKind.EventRaise)
      .WriteLine("\")]");

    private void RenderAttributes(IMethodSymbol methodSymbol, bool served = false)
    {
      Writer
        .Write("[System.ComponentModel.Description(\"")
        .Write(methodSymbol.MethodKind)
        .WriteLine("\")]");

      switch (methodSymbol.MethodKind)
      {
        case MethodKind.EventAdd:
        case MethodKind.EventRemove:
        case MethodKind.PropertyGet:
        case MethodKind.PropertySet:
        case MethodKind.Ordinary:
          {
            break;
          }
        default:
          {
            Writer.WriteLine("""[System.Obsolete("Not Generated")]""");
            break;
          }
      }
    }
    
    private void RenderBody(IEventSymbol eventSymbol, bool served)
    {
      var invokeSymbol = eventSymbol.InvokeSymbol();

      Writer.WriteLine('{');
      Writer.IncreaseIndent();
      if (served)
      {
        if (invokeSymbol.ReturnsVoid)
        {
          Writer.Write($$"""{{() => RenderName(eventSymbol, true, "event_")}}?.Invoke({{()=>RenderStrings(invokeSymbol.Parameters.Select(x=>x.Name).ToArray())}});""");
        }
        else
        {
          Writer.Write($$"""return {{() => RenderName(eventSymbol, true, "event_")}}?.Invoke({{() => RenderStrings(invokeSymbol.Parameters.Select(x => x.Name).ToArray())}}) ?? default;""");
        }
      }
      else
      {
        var (input, output) = GetIO(invokeSymbol);

        if (!invokeSymbol.ReturnsVoid || output.Count > 0)
          Writer.Write("var result = ");

        Writer.Write("Remote");

        if (!invokeSymbol.ReturnsVoid || output.Count > 0 || input.Count > 0)
        {
          Writer.Write('<');

          if (input.Count > 1)
            Writer.Write("(");
          RenderTypeParameters(input.Select(x => x.Type).ToArray());
          if (input.Count > 1)
            Writer.Write(")");

          if ((!invokeSymbol.ReturnsVoid || output.Count > 0) && input.Count > 0)
            Writer.Write(", ");

          if ((!invokeSymbol.ReturnsVoid && output.Count > 0) || output.Count > 1)
            Writer.Write('(');
          if (!invokeSymbol.ReturnsVoid)
            Writer.Write(invokeSymbol.ReturnType.TypeUse());
          if(!invokeSymbol.ReturnsVoid && output.Count>0)
            Writer.Write(", ");
          RenderTypeParameters(output.Select(x => x.Type).ToArray());
          if ((!invokeSymbol.ReturnsVoid && output.Count > 0) || output.Count > 1)
            Writer.Write(')');

          Writer.Write('>');
        }

        Writer.Write("(\"");
        RenderName(eventSymbol, served, "invoke_");
        Writer.Write('"');
        if (input.Count > 0)
          Writer.Write(", ");
        if (input.Count > 1)
          Writer.Write('(');
        RenderStrings(input.Select(x => x.Name).ToArray());
        if (input.Count > 1)
          Writer.Write(')');
        Writer.Write(");");

        if (!invokeSymbol.ReturnsVoid || output.Count > 0)
          Writer.WriteLine();

        if ((!invokeSymbol.ReturnsVoid && output.Count > 0) || output.Count > 1)
        {
          for (int i = output.Count - 1; i >= 0; i--)
          {
            Writer.Write($$"""{{output[i].Name}} = result.Item{{i + (invokeSymbol.ReturnsVoid ? 1 : 2)}};""");
          }
        }

        if (invokeSymbol.ReturnsVoid && output.Count == 1)
        {
          Writer.Write($$"""{{output[0].Name}} = result;""");
        }

        if (!invokeSymbol.ReturnsVoid)
        {
          if (output.Count > 0)
            Writer.Write("return result.Item1;");
          else
            Writer.Write("return result;");
        }
      }
      Writer.DecreaseIndent();
      Writer.WriteLine();
      Writer.WriteLine('}');
    }

    private void RenderBody(IMethodSymbol methodSymbol, bool served)
    {
      Writer.WriteLine('{');
      Writer.IncreaseIndent();
      switch (methodSymbol.MethodKind)
      {
        case MethodKind.EventAdd:
          {
            if (served)
            {
              Writer.Write($$"""(({{methodSymbol.ContainingType.TypeUse()}}?) this)!.{{methodSymbol.Name.Substring(4)}} += value;""");
            }
            else
            {
              Writer.Write($$"""(({{methodSymbol.ContainingType.TypeUse()}}?) Target)!.{{methodSymbol.Name.Substring(4)}} += value;""");
            }
            break;
          }
        case MethodKind.EventRemove:
          {
            if (served)
            {
              Writer.Write($$"""(({{methodSymbol.ContainingType.TypeUse()}}?) this)!.{{methodSymbol.Name.Substring(7)}} -= value;""");
            }
            else
            {
              Writer.Write($$"""(({{methodSymbol.ContainingType.TypeUse()}}?) Target)!.{{methodSymbol.Name.Substring(7)}} -= value;""");
            }
            break;
          }
        case MethodKind.PropertyGet:
          {
            if (served)
            {
              Writer.Write($$"""return Remote<{{methodSymbol.ReturnType.TypeUse()}}>("{{()=> RenderName(methodSymbol,served)}}");""");
            }
            else
            {
              Writer.Write($$"""return (({{methodSymbol.ContainingType.TypeUse()}}?) Target)!.{{methodSymbol.Name.Substring(4)}};""");
            }
            break;
          }
        case MethodKind.PropertySet:
          {
            if (served)
            {
              Writer.Write($$"""Remote<{{methodSymbol.Parameters[0].Type.TypeUse()}}>("{{() => RenderName(methodSymbol, served)}}", value);""");
            }
            else
            {
              Writer.Write($$"""(({{methodSymbol.ContainingType.TypeUse()}}?) Target)!.{{methodSymbol.Name.Substring(4)}} = value;""");
            }
            break;
          }
        case MethodKind.Ordinary:
          {
            var (input, output) = GetIO(methodSymbol);
            if (served)
            {
              if (!methodSymbol.ReturnsVoid || output.Count > 0)
                Writer.Write("var result = ");

              Writer.Write("Remote");

              if (!methodSymbol.ReturnsVoid || output.Count > 0 || input.Count > 0)
              {
                Writer.Write('<');

                if (input.Count > 1)
                  Writer.Write("(");
                RenderTypeParameters(input.Select(x => x.Type).ToArray());
                if (input.Count > 1)
                  Writer.Write(")");

                if ((!methodSymbol.ReturnsVoid || output.Count > 0) && input.Count > 0)
                  Writer.Write(", ");

                if ((!methodSymbol.ReturnsVoid && output.Count > 0) || output.Count > 1)
                  Writer.Write('(');
                if (!methodSymbol.ReturnsVoid)
                  Writer.Write(methodSymbol.ReturnType.TypeUse());
                if (!methodSymbol.ReturnsVoid && output.Count > 0)
                  Writer.Write(", ");
                RenderTypeParameters(output.Select(x => x.Type).ToArray());
                if ((!methodSymbol.ReturnsVoid && output.Count > 0) || output.Count > 1)
                  Writer.Write(')');

                Writer.Write('>');
              }

              Writer.Write("(\"");
              RenderName(methodSymbol, served);
              Writer.Write('"');
              if(input.Count > 0)
                Writer.Write(", ");
              if(input.Count > 1)
                Writer.Write('(');
              RenderStrings(input.Select(x => x.Name).ToArray());
              if (input.Count > 1)
                Writer.Write(')');
              Writer.Write(");");

              if (!methodSymbol.ReturnsVoid || output.Count > 0)
                Writer.WriteLine();

              if ((!methodSymbol.ReturnsVoid && output.Count > 0) || output.Count > 1)
              {
                for (int i = output.Count - 1; i >= 0; i--)
                {
                  Writer.Write($$"""{{output[i].Name}} = result.Item{{i + (methodSymbol.ReturnsVoid ? 1 : 2)}};""");
                }
              }

              if (methodSymbol.ReturnsVoid && output.Count == 1)
              {
                Writer.Write($$"""{{output[0].Name}} = result;""");
              }

              if (!methodSymbol.ReturnsVoid)
              {
                if (output.Count > 0)
                  Writer.Write("return result.Item1;");
                else
                  Writer.Write("return result;");
              }
            }
            else
            {
              if (!methodSymbol.ReturnsVoid)
                Writer.Write("var result = ");

              Writer.Write($$"""(({{methodSymbol.ContainingType.TypeUse()}}?) Target)!.{{methodSymbol.Name}}""");

              if(methodSymbol.TypeParameters.Length > 0)
              {
                Writer.Write('<');
                RenderTypeParameters(methodSymbol.TypeParameters);
                Writer.Write('>');
              }

              Writer.Write('(');
              for (int i = 0; i < methodSymbol.Parameters.Length; i++)
              {
                var parameter = methodSymbol.Parameters[i];
                switch (parameter.RefKind)
                {
                  case RefKind.None when input.Count > 1: Writer.Write("parameter."); break;
                  case RefKind.Ref  when input.Count > 1: Writer.Write("ref parameter."); break;
                  case RefKind.Ref: Writer.Write("ref "); break;
                  case RefKind.Out: Writer.Write("out var "); break;
                  case RefKind.In when input.Count > 1:
                  case RefKind.In + 1 when input.Count > 1: Writer.Write("ref parameter."); break;
                  case RefKind.In:
                  case RefKind.In + 1: Writer.Write("in "); break;
                }
                Writer.Write(parameter.Name);
                if (i != methodSymbol.Parameters.Length - 1)
                {
                  Writer.Write(", ");
                }
              }
              Writer.Write(");");

              if (!methodSymbol.ReturnsVoid || output.Count > 0)
              {
                Writer.WriteLine();

                if (!methodSymbol.ReturnsVoid)
                {
                  if (output.Count == 0)
                    Writer.Write("return result;");
                  else
                  {
                    Writer.Write("return (result, ");
                    for (int i = 0; i < output.Count; i++)
                    {
                      var parameter = output[i];
                      switch (parameter.RefKind)
                      {
                        case RefKind.None when input.Count > 1:
                        case RefKind.Ref when input.Count > 1: Writer.Write("parameter."); break;
                        case RefKind.Ref: break;
                        case RefKind.Out: break;
                        case RefKind.In when input.Count > 1:
                        case RefKind.In + 1 when input.Count > 1: Writer.Write("parameter."); break;
                        case RefKind.In:
                        case RefKind.In + 1: break;
                      }
                      Writer.Write(parameter.Name);
                      if (i != output.Count - 1)
                      {
                        Writer.Write(", ");
                      }
                    }
                    Writer.Write(");");
                  }
                }
                else
                {
                  if (output.Count == 1)
                  {
                    Writer.Write("return ");
                    Writer.Write(output[0].Name);
                    Writer.Write(';');
                  }
                  else
                  {
                    Writer.Write("return (");
                    for (int i = 0; i < output.Count; i++)
                    {
                      var parameter = output[i];
                      switch (parameter.RefKind)
                      {
                        case RefKind.None when input.Count > 1:
                        case RefKind.Ref when input.Count > 1: Writer.Write("parameter."); break;
                        case RefKind.Ref: break;
                        case RefKind.Out: break;
                        case RefKind.In when input.Count > 1:
                        case RefKind.In + 1 when input.Count > 1: Writer.Write("parameter."); break;
                        case RefKind.In:
                        case RefKind.In + 1: break;
                      }
                      Writer.Write(parameter.Name);
                      if (i != output.Count - 1)
                      {
                        Writer.Write(", ");
                      }
                    }
                    Writer.Write(");");
                  }
                }
              }
            }
            break;
          }
        default:
          {
            Writer.Write("throw new NotImplementedException();");
            break;
          }
      }
      Writer.DecreaseIndent();
      Writer.WriteLine();
      Writer.WriteLine('}');
    }

    private void RenderTypeName(INamedTypeSymbol namedTypeSymbol, bool served)
    {
      Writer
        //.Write(served?"Serve_":"Using_")
        .Write(namedTypeSymbol.Name);
      if (namedTypeSymbol.TypeArguments.Length>0)
      {
        Writer.Write("_args");
        foreach (var item in namedTypeSymbol.TypeArguments)
        {
          Writer.Write('_');
          if(item is INamedTypeSymbol nts)
            RenderTypeName(nts, served);
          else
            Writer.Write(item.Name);
        }
        Writer.Write("_end_");
      }
    }

    private void RenderTypeName(StringBuilder writer, INamedTypeSymbol namedTypeSymbol, bool served)
    {
      writer
        //.Append(served?"Serve_":"Using_")
        .Append(namedTypeSymbol.Name);
      if (namedTypeSymbol.TypeArguments.Length > 0)
      {
        writer.Append("_args");
        foreach (var item in namedTypeSymbol.TypeArguments)
        {
          writer.Append('_');
          if (item is INamedTypeSymbol nts)
            RenderTypeName(writer, nts, served);
          else
            writer.Append(item.Name);
        }
        writer.Append("_end_");
      }
    }

    private void RenderTypeSyntaxName()
    {
      Writer.Write(TypeDefinition.TypeDeclarationSyntax.Identifier);
      if(TypeDefinition.TypeDeclarationSyntax.TypeParameterList is not null)
      {
        if (TypeDefinition.TypeDeclarationSyntax.TypeParameterList.Parameters.Count > 0)
        {
          Writer.Write("_args");
          foreach (var item in TypeDefinition.TypeDeclarationSyntax.TypeParameterList.Parameters)
          {
            Writer.Write('_').Write(item.Identifier);
          }
          Writer.Write("_end_");
        }
      }
    }

    private void RenderName(ISymbol symbol, bool served, string prefix = "")
    {
      Writer
        .Write(prefix)
        .Write(symbol.Name)
        .Write('_');
      RenderTypeName(symbol.ContainingType, served);
    }

    private string GetName(ISymbol symbol, bool served, string prefix = "")
    {
      var sb = new StringBuilder();
      RenderName(sb, symbol, served, prefix);
      return sb.ToString();
    }

    private void RenderName(StringBuilder writer, ISymbol symbol, bool served, string prefix = "")
    {
      writer
        .Append(prefix)
        .Append(symbol.Name)
        .Append('_');
      RenderTypeName(writer, symbol.ContainingType, served);
    }

    private void RenderSignature(IEventSymbol eventSymbol, bool served)
    {
      Writer.Write("internal ");
      if (eventSymbol.IsStatic)
        Writer.Write("static ");

      var invokeSymbol = eventSymbol.InvokeSymbol();

      Writer
        .Write(invokeSymbol.ReturnType.TypeUse())//todo actual return type of event
        .Write(' ');
      RenderName(eventSymbol, served, "invoke_");
      Writer.Write('(');
      RenderParameters(invokeSymbol.Parameters);
      Writer.Write(')');

      if (served)
        TypeDefinition.Commands[GetName(eventSymbol, served, "invoke_")] = (eventSymbol,invokeSymbol);

      Writer.WriteLine();
    }

    private void RenderSignature(IMethodSymbol methodSymbol, bool served)
    {
      Writer.Write("internal ");
      if (methodSymbol.IsStatic)
        Writer.Write("static ");
      if (methodSymbol.IsAsync)
        Writer.Write("async ");

      if (served)
      {
        Writer
          .Write(methodSymbol.ReturnType.TypeUse())
          .Write(' ');
        RenderName(methodSymbol, served);
        if (methodSymbol.TypeParameters.Length > 0)
        {
          Writer.Write('<');
          RenderTypeParameters(methodSymbol.TypeParameters);
          Writer.Write('>');
        }
        Writer.Write('(');
        RenderParameters(methodSymbol.Parameters);
        Writer.Write(')');
      }
      else
      {
        var (input, output) = GetIO(methodSymbol);
        if(methodSymbol.ReturnsVoid && output.Count == 0)
        {
          Writer.Write("void");
        }
        else if(methodSymbol.ReturnsVoid && output.Count == 1)
        {
          Writer.Write(output[0].Type.TypeUse());
        }
        else if (!methodSymbol.ReturnsVoid && output.Count == 0)
        {
          Writer.Write(methodSymbol.ReturnType.TypeUse());
        }
        else
        {
          Writer.Write('(');
          if(!methodSymbol.ReturnsVoid)
            Writer.Write(methodSymbol.ReturnType.TypeUse());
          if(!methodSymbol.ReturnsVoid && output.Count > 0)
            Writer.Write(", ");
          RenderStrings(output.Select(x=>x.Type.TypeUse()).ToArray());
          Writer.Write(')');
        }
        Writer.Write(' ');
        RenderName(methodSymbol, served);
        if (methodSymbol.TypeParameters.Length > 0)
        {
          Writer.Write('<');
          RenderTypeParameters(methodSymbol.TypeParameters);
          Writer.Write('>');
        }
        Writer.Write('(');
        if(input.Count>1)
          Writer.Write('(');
        for (int i = 0; i < input.Count; i++)
        {
          var parameter = input[i];
          Writer.Write(parameter.Type.TypeUse());
          Writer.Write(' ');
          Writer.Write(parameter.Name);
          if (i != input.Count - 1)
          {
            Writer.Write(", ");
          }
        }
        if (input.Count > 1)
          Writer.Write(") parameter");
        Writer.Write(')');

        if (methodSymbol.TypeParameters.Length == 0)
          TypeDefinition.Commands[GetName(methodSymbol, served)] = (methodSymbol, methodSymbol);
      }
      Writer.WriteLine();
    }

    private (List<IParameterSymbol> input, List<IParameterSymbol> output) GetIO(IMethodSymbol methodSymbol)
    {
      var input = new List<IParameterSymbol>();
      var output = new List<IParameterSymbol>();

      foreach (var parameter in methodSymbol.Parameters)
      {
        switch (parameter.RefKind)
        {
          case RefKind.None: input.Add(parameter); break;
          case RefKind.Ref: input.Add(parameter); output.Add(parameter); break;
          case RefKind.Out: output.Add(parameter); break;
          case RefKind.In:
          case RefKind.In + 1: input.Add(parameter); break;
        }
      }
      return (input, output);
    }

    private void RenderTypeParameters(IReadOnlyList<ITypeSymbol> typeSymbols)
    {
      for (int i = 0; i < typeSymbols.Count; i++)
      {
        var symbol = typeSymbols[i];
        Writer.Write(symbol.TypeUse());
        if (i != typeSymbols.Count - 1)
        {
          Writer.Write(", ");
        }
      }
    }

    private void RenderStrings(IReadOnlyList<string> strings)
    {
      for (int i = 0; i < strings.Count; i++)
      {
        var parameter = strings[i];
        Writer.Write(parameter);
        if (i != strings.Count - 1)
        {
          Writer.Write(", ");
        }
      }
    }

    private void RenderParameters(IReadOnlyList<IParameterSymbol> parameterSymbols)
    {
      for (int i = 0; i < parameterSymbols.Count; i++)
      {
        var parameter = parameterSymbols[i];
        Writer.Write(parameter.ToDisplayString());
        if(i != parameterSymbols.Count - 1)
        {
          Writer.Write(", ");
        }
      }
    }
  }
}
